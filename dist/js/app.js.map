{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","app.js","src/js/app/app.js","src/js/app/background.js","src/js/app/bodyclass.js","src/js/app/utils.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","global","window","$","angular","background","bodyclass","utils","pimpClasses","f5SkinApp","constant","Modernizr","run","FastClick","attach","document","body","factory","stdPreferences","JSON","parse","text","usrPreferences","preferences","extend","f5CoreInfo","update","lastCheck","Date","each","timeSlots","this","from","to","controller","$scope","$modal","param","setImage","topbar","menuItems","topics","siteAlias","toLowerCase","drop","has","breadcrumbs","items","getBreadcrumbs","abo","getSpecialMenu","images","isLoggedIn","userName","isAdmin","userRole","isContributor","sendMail","location","href","rot13","mailIcon","msgClose","customize","open","modalCustomize","templateUrl","resolve","backdrop","keyboard","windowClass","result","then","customizedParams","message","$modalInstance","ok","close","cancel","dismiss","input","setStaticFolder","site","imgFolder","staticUrl","testLoader","show","delay","hide","positions","repeats","sizes","attachments","isEditMode","isCreateMode","slotCheck","slots","slotEnd","status","getMinute","formatTime","slotStatusOK","slotStatus","edit","index","slot","copy","save","insert","sort","b","findFirst","cbSelectCondition","selectedIndex","sIdx","clone","remove","thisSlot","addMinutes","push","nocheck","splice","create","repeat","position","size","attachment","usePosition","useRepeat","useSize","useAttachment","$filter","$http","isChecking","dateNextCheck","gap","getTime","updateChecks","check","useFrequency","frequency","checkForUpdate","get","releaseUrl","success","data","headers","config","release","getRelease","newVersion","parseVersion","version","error","updateStatus","skinStatus","updStatus","downloadRelease","self","./background.js","./bodyclass.js","./utils.js",2,"date","getHours","getMinutes","h","attr","load","css","background-image","background-repeat","background-position","background-attachment","background-size","height","fadeOut",3,"pathname","path","replace","trim","split","addClass",4,"linksToObjects","selector","linkObjects","innerText","menuID","c","String","fromCharCode","charCodeAt","minutes","newTime","slice","parseInt","parseCRC","chars","crc32","match","$data","find","author","releasedate","skins","skinName","dateSourceWasUpdated","skinCRC","skinContent","name","content"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",null,"(typeof window !== \"undefined\" ? window.$ : typeof global !== \"undefined\" ? global.$ : null);\r\nvar angular = (typeof window !== \"undefined\" ? window.angular : typeof global !== \"undefined\" ? global.angular : null),\r\n    background = require('./background.js'),\r\n    bodyclass = require('./bodyclass.js'),\r\n    utils = require('./utils.js');\r\n\r\n//--- Add additional body classes for individualized CSS rules\r\nbodyclass();\r\n\r\n//--- Pimp old Twoday classes, e.g. button in a .message\r\nutils.pimpClasses();\r\n\r\n//--- Set up the Angular app, Modernizr constant and run the FastClick js\r\nvar f5SkinApp = angular.module(\"f5SkinApp\", ['mm.foundation'])\r\n    .constant('Modernizr', window.Modernizr)\r\n    .run( function(){ window.FastClick.attach(document.body); });\r\n\r\nf5SkinApp.factory(\"Preferences\", function(){\r\n//- Consolidate standardPreferences, userPreferences and generic core info from Twoday macros\r\n    var stdPreferences = JSON.parse($(\"#stdPreferences\").text() || \"{}\"),\r\n        usrPreferences = JSON.parse($(\"#usrPreferences\").text() || \"{}\"),\r\n        preferences = $.extend( {}, stdPreferences, usrPreferences, window.f5CoreInfo);\r\n//- Parse stringified/converted dates and re-convert to true date format\r\n    preferences.update.lastCheck = new Date(Date.parse(preferences.update.lastCheck));\r\n    $.each(preferences.timeSlots, function(){\r\n        this.from = new Date(1970,0,1,(this.from/60>>0),(this.from % 60),0 );\r\n        this.to = new Date(1970,0,1,(this.to/60>>0),(this.to % 60),0 );\r\n    });\r\n//- Provide preferences through dependency injection\r\n    return preferences;\r\n});\r\n\r\nf5SkinApp.controller(\"F5SkinController\", [\"$scope\", \"Preferences\", \"$modal\", function ($scope, preferences, $modal){\r\n\r\n//- Get the consolidated preferences data\r\n    $scope.param = preferences;\r\n\r\n//- Set background image based on hour of the day and user defined image items/slots\r\n    background.setImage($scope.param.timeSlots);\r\n\r\n//- Set default value for topics.text if user has not provided one\r\n    if ($scope.param.topbar.menuItems.topics.text.length===0)\r\n        $scope.param.topbar.menuItems.topics.text = $scope.param.siteAlias.toLowerCase();\r\n\r\n//- Adjust topics.class if topiclist-macro has found/generated any story topics\r\n    $scope.param.topbar.menuItems.topics.drop = ($(\"#toolbarTopics\").has(\".dropdown\"));\r\n\r\n//- Extract breadcrumb/special menu links and put them into the scope\r\n    $scope.param.topbar.menuItems.breadcrumbs.items = utils.getBreadcrumbs();\r\n    //console.dir($scope.param.topbar.menuItems.breadcrumbs.items);\r\n    $scope.param.topbar.menuItems.abo.items = utils.getSpecialMenu(\"#aboMenu\");\r\n    $scope.param.topbar.menuItems.images.items = utils.getSpecialMenu(\"#imageMenu\");\r\n\r\n//- Add utility functions to be used in ng-functions (view)\r\n    $scope.param.isLoggedIn = function(){\r\n        return ($scope.param.userName.length>0);\r\n    };\r\n    $scope.param.isAdmin = function(){\r\n        return ($scope.param.isLoggedIn() && $scope.param.userRole()===\"Administrator\");\r\n    };\r\n    $scope.param.isContributor = function(){\r\n        return ($scope.param.isLoggedIn() && ($scope.param.userRole()===\"Contributor\" || $scope.param.userRole()===\"Administrator\"));\r\n    };\r\n    $scope.param.sendMail = function(){\r\n        window.location.href = utils.rot13($scope.param.topbar.mailIcon.href);\r\n    };\r\n\r\n//- When true (user clicked the close button), it triggers the fadeout of the response alert-box\r\n    $scope.msgClose = false;\r\n\r\n    $scope.customize = {\r\n\r\n        open: function(){\r\n            var modalCustomize = $modal.open({\r\n                templateUrl: \"customizeBlogHtml\",\r\n                controller:  \"CustomizeBlogController\",\r\n                resolve: {\r\n                    param: function (){\r\n                        return $scope.param;\r\n                    }\r\n                },\r\n                backdrop: \"static\",\r\n                keyboard: false,\r\n                windowClass: \"xlarge\"\r\n            });\r\n            modalCustomize.result.then(function(customizedParams){\r\n                //dosomething after OK\r\n            }, function(message){\r\n                //dosomething upon cancel\r\n            });\r\n        }\r\n    };\r\n}]);\r\n\r\nf5SkinApp.controller(\"CustomizeBlogController\", [\"$scope\", \"$modalInstance\", function ($scope, $modalInstance, param){\r\n\r\n    $scope.param = param;\r\n\r\n    $scope.ok = function(){\r\n        $modalInstance.close(\"Pressed OK!\");\r\n    };\r\n\r\n    $scope.cancel = function(){\r\n        $modalInstance.dismiss(\"Pressed Cancel!\");\r\n    };\r\n\r\n}]);\r\n\r\nf5SkinApp.controller(\"tmplGrunddatenController\", [\"$scope\", \"Preferences\", function($scope, preferences){\r\n    $scope.input = preferences;\r\n\r\n    $scope.setStaticFolder = function(){\r\n        $scope.input.site.imgFolder = $scope.input.staticUrl + $scope.input.userName + \"/images/\";\r\n    };\r\n\r\n    $scope.testLoader = function(){\r\n        $(\"#loader-wrapper\").show(0).delay(3000).hide(0);\r\n    };\r\n}]);\r\n\r\nf5SkinApp.controller(\"tmplHintergrundbilderController\", [\"$scope\", \"Preferences\", function($scope, preferences){\r\n    $scope.input = preferences;\r\n\r\n    $scope.positions = [\r\n        \"left top\", \"left center\", \"left bottom\",\r\n        \"right top\", \"right center\", \"right bottom\",\r\n        \"center top\", \"center center\", \"center bottom\"\r\n    ];\r\n\r\n    $scope.repeats = [ \"repeat\", \"repeat-x\", \"repeat-y\", \"no-repeat\" ];\r\n\r\n    $scope.sizes = [ \"auto\", \"cover\", \"contain\" ];\r\n\r\n    $scope.attachments = [ \"fixed\", \"local\", \"scroll\" ];\r\n\r\n    $scope.isEditMode = $scope.isCreateMode = false;\r\n\r\n    $scope.slotCheck = function(){\r\n        var slots=$scope.input.timeSlots, slotEnd=-1, status=(slots.length>0 ? \"\" : \"Keine Hintergrund-Zeitfenster vorhanden!\");\r\n        $.each( $scope.input.timeSlots, function(){\r\n            //console.log(\"from: \"+utils.getMinute(this.from)+\" slotEnd: \"+slotEnd+\" (\"+(slotEnd+1)+\")\");\r\n            if (utils.getMinute(this.from)!==slotEnd+1){\r\n                status = (slotEnd<0\r\n                       ? \"Die Zeitangabe beginnt nicht bei 00:00 Uhr!\"\r\n                       : \"Es besteht eine Zeitlücke bei \"+utils.formatTime(this.from)+\" Uhr!\");\r\n                return false;\r\n            } else slotEnd = utils.getMinute(this.to);\r\n        });\r\n        if (status.length===0 && slotEnd!==23*60+59) status = \"Die Zeitangabe endet nicht bei 23:59 Uhr!\";\r\n        $scope.slotStatusOK = (status.length===0);\r\n        $scope.slotStatus = ($scope.slotStatusOK ? \"Alle Hintergrund-Zeitfenster vollständig definiert.\" : status);\r\n    };\r\n\r\n    $scope.edit = function(index){\r\n        $scope.slot = angular.copy($scope.input.timeSlots[index]);\r\n        $scope.index = index;\r\n        $scope.isEditMode = true;\r\n    };\r\n\r\n    $scope.cancel = function(){\r\n        if ($scope.isCreateMode) delete $scope.slot;\r\n        $scope.isEditMode = $scope.isCreateMode = false;\r\n    };\r\n\r\n    $scope.save = function(){\r\n        if ($scope.isCreateMode) $scope.insert(); else $scope.update();\r\n        $scope.slotCheck();\r\n        $scope.isEditMode = $scope.isCreateMode = false;\r\n    };\r\n\r\n    $scope.sort = function(){\r\n        $scope.input.timeSlots.sort( function(a,b){ return utils.getMinute(a.from) - utils.getMinute(b.from); });\r\n    };\r\n\r\n    $scope.findFirst = function(cbSelectCondition){\r\n        var slots = $scope.input.timeSlots, selectedIndex = -1;\r\n        $.each( slots, function(index, slot){\r\n            if (cbSelectCondition(slot)){\r\n                selectedIndex = index;\r\n                return false;\r\n            }\r\n        });\r\n        return selectedIndex;\r\n    };\r\n\r\n    $scope.insert = function(){\r\n//----- Get the currently defined timeslots\r\n        var slots = $scope.input.timeSlots, slot, sIdx = 0, clone = null;\r\n//----- Delete all old slots that are encompassed/embedded by the new slot\r\n        while (sIdx<slots.length){\r\n            slot = slots[sIdx];\r\n            if (slot.from>=$scope.slot.from && slot.to<=$scope.slot.to)\r\n                $scope.remove(sIdx, false);\r\n            else\r\n                sIdx++;\r\n        }\r\n//----- Find the first slot where new-fromTime is included\r\n        sIdx = $scope.findFirst(function(thisSlot){ return ($scope.slot.from<thisSlot.to); });\r\n        if (sIdx>=0){\r\n            if ($scope.slot.from>slots[sIdx].from && $scope.slot.to<slots[sIdx].to){\r\n                clone = angular.copy(slots[sIdx]);\r\n                clone.from = utils.addMinutes($scope.slot.to, +1);\r\n                slots[sIdx].to = utils.addMinutes($scope.slot.from, -1);\r\n            } else if ($scope.slot.from<=slots[sIdx].from && $scope.slot.to<slots[sIdx].to){\r\n                slots[sIdx].from = utils.addMinutes($scope.slot.to, +1);\r\n            } else if ($scope.slot.to>=slots[sIdx].to){\r\n                slots[sIdx].to = utils.addMinutes($scope.slot.from, -1);\r\n                if (slots.length>sIdx+1) slots[sIdx+1].from = utils.addMinutes($scope.slot.to, +1);\r\n            }\r\n        }\r\n//----- Push the new slot to the array\r\n        slots.push($scope.slot);\r\n//----- Push the clone slot to the array if there is one\r\n        if (clone!==null) slots.push(clone);\r\n//----- and re-sort\r\n        $scope.sort();\r\n    };\r\n\r\n    $scope.update = function(){\r\n        $scope.input.timeSlots[$scope.index] = $scope.slot;\r\n        $scope.sort();\r\n    };\r\n\r\n    $scope.remove = function(index, nocheck){\r\n//----- Get the currently defined timeslots\r\n        var slots = $scope.input.timeSlots;\r\n//----- If index to delete is not the first, then consolidate times with preceeding timeslot\r\n        if (index>0) slots[index-1].to = slots[index].to;\r\n//----- If index is the first and there is a succeeding timeslot, consolidate with succeeding timeslot\r\n        else if (slots.length>1) slots[1].from = slots[0].from;\r\n//----- anyway delete this index now\r\n        slots.splice(index, 1);\r\n//----- and re-check the slots status unless internal call from insert function\r\n        if (nocheck || true) $scope.slotCheck();\r\n    };\r\n\r\n    $scope.create = function(){\r\n        $scope.slot = {\r\n              \"from\": new Date(1970,0,1,0,0,0), \"to\": new Date(1970,0,1,23,59,0),\r\n              \"repeat\": \"no-repeat\", \"position\": \"center top\", \"size\": \"cover\",\r\n              \"attachment\": \"fixed\", \"href\": $scope.input.site.imgFolder };\r\n        $scope.isCreateMode = true;\r\n    };\r\n\r\n    $scope.usePosition = function(index){\r\n        $scope.slot.position = $scope.positions[index];\r\n    };\r\n\r\n    $scope.useRepeat = function(index){\r\n        $scope.slot.repeat = $scope.repeats[index];\r\n    };\r\n\r\n    $scope.useSize = function(index){\r\n        $scope.slot.size = $scope.sizes[index];\r\n    };\r\n\r\n    $scope.useAttachment = function(index){\r\n        $scope.slot.attachment = $scope.attachments[index];\r\n    };\r\n\r\n    $scope.slotCheck();\r\n\r\n}]);\r\n\r\nf5SkinApp.controller(\"tmplAktualisierung\", [\"$scope\", \"$filter\", \"$http\", \"Preferences\", function($scope, $filter, $http, preferences){\r\n    $scope.input = preferences;\r\n\r\n    $scope.msgClose = true;\r\n    $scope.isChecking = false;\r\n\r\n    $scope.dateNextCheck = function(){\r\n        return ($scope.input.update.gap<0\r\n            ? \"Keine Prüfung\"\r\n            : $filter('date')(new Date($scope.input.update.lastCheck.getTime()+$scope.input.update.gap), \"dd.MM.yyyy HH:mm\"));\r\n    };\r\n\r\n    $scope.updateChecks = [\r\n        { check: \"täglich\", gap: 24*60*60*1000 },\r\n        { check: \"wöchentlich\", gap: 7*24*60*60*1000 },\r\n        { check: \"monatlich\", gap: 30*24*60*60*1000 },\r\n        { check: \"niemals\", gap: -1 }\r\n    ];\r\n\r\n    $scope.useFrequency = function(index){\r\n        var frequency = $scope.updateChecks[index];\r\n        $scope.input.update.check = frequency.check;\r\n        $scope.input.update.gap = frequency.gap;\r\n    };\r\n\r\n    $scope.checkForUpdate = function(){\r\n        $scope.isChecking = true;\r\n        $http.get($scope.input.update.releaseUrl+\"releaseinfo.xml\")\r\n          .success(function(data, status, headers, config){\r\n                $scope.release = utils.getRelease($(data));\r\n                $scope.newVersion = (utils.parseVersion($scope.release.version)>utils.parseVersion($scope.input.update.version));\r\n                $scope.msgClose = false;\r\n                $scope.input.update.lastCheck = new Date();\r\n                $scope.isChecking = false;\r\n          })\r\n          .error(function(data, status, headers, config){\r\n                $scope.isChecking = false;\r\n          });\r\n    };\r\n\r\n    $scope.updateStatus = function(skinStatus){\r\n        var updStatus = [\"nicht geprüft\", \"bleibt unverändert\", \"wird aktualisiert\", \"erfolgreich aktualisiert\"];\r\n        return updStatus[skinStatus || 0];\r\n    };\r\n\r\n    $scope.downloadRelease = function(){\r\n    };\r\n\r\n}]);","(typeof window !== \"undefined\" ? window.$ : typeof global !== \"undefined\" ? global.$ : null);\r\n/**\r\n * Sets the appropriate background image based on the actual hour of the day and user defined image items/slots\r\n */\r\nmodule.exports = {\r\n    setImage: function(timeSlots){\r\n        var getMinute = function(date){ return date.getHours()*60+date.getMinutes(); };\r\n//----- return immediately if there are no user defined time slots/images\r\n        if (timeSlots.length===0) return;\r\n//----- get the current minute of the day\r\n        var h = getMinute(new Date());\r\n//----- check with each timeslot to find the appropriate entry\r\n        $.each( timeSlots, function(){\r\n            if (h>=getMinute(this.from) && h<=getMinute(this.to)){\r\n//------------- once timeslot was found, preload the image\r\n                var self = this;\r\n                $('<img/>').attr('src', self.href).load( function(){\r\n//----------------- remove the temp img to prevent memory leaks\r\n                    $(this).remove();\r\n//----------------- now set the background-image with all params\r\n                    $('body').css({\r\n                        'background-image': 'url(\"'+self.href+'\")',\r\n                        'background-repeat': self.repeat,\r\n                        'background-position': self.position,\r\n                        'background-attachment': self.attachment,\r\n                        'background-size': self.size,\r\n                        'height': '100%'\r\n                    });\r\n//----------------- and fade the preloading animation\r\n                    $(\"#loader-wrapper\").fadeOut(\"slow\");\r\n                });\r\n//------------- then quit the each loop\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n};","(typeof window !== \"undefined\" ? window.$ : typeof global !== \"undefined\" ? global.$ : null);\r\n/**\r\n * Adds additional classes to the BODY element\r\n * onHome ~ if the homepage is displayed\r\n * onTopic ~ if a topic page is displayed\r\n * topic-{topicID} ~ ID of the topic (lowercase ID)\r\n * onStory ~ if a story is displayed\r\n * story-{storyID} ~ ID of the story (lowercase ID)\r\n *\r\n * Examples:\r\n * pathname=\"/\" ===> bodyclasses=\"onHome\"\r\n * pathname=\"/topics/Testthema/\" ==> bodyclasses=\"onTopic topic-testthema\"\r\n * pathname=\"/stories/is-it-me-youre-looking-for/\" ==> bodyclasses=\"onStory story-is-it-me-youre-looking-for\"\r\n *\r\n */\r\nmodule.exports = function(){\r\n    var bodyclass = \"\";\r\n    if (location.pathname===\"/\") bodyclass = \"onHome\";\r\n    else {\r\n        var path = location.pathname.replace(/\\//g, \" \").trim().split(\" \");\r\n        switch (path[0]) {\r\n            case \"topics\":  bodyclass = \"onTopic \" + path[1].toLowerCase(); break;\r\n            case \"stories\": bodyclass = \"onStory \" + path[1].toLowerCase(); break;\r\n        }\r\n    }\r\n    if (bodyclass.length>0) $(\"body\").addClass(bodyclass);\r\n};","(typeof window !== \"undefined\" ? window.$ : typeof global !== \"undefined\" ? global.$ : null);\r\nmodule.exports = {\r\n\r\n//- Converts selected DOM links to an array of link objects (href,text)\r\n    linksToObjects: function(selector){\r\n        var linkObjects = [];\r\n            $(selector).each( function(){\r\n                linkObjects.push({ \"href\": this.href, \"text\": this.innerText });\r\n            });\r\n        return linkObjects;\r\n    },\r\n\r\n//- Extract breadcrumbs-links out of Twoday's modToolbarNavigationpath-macro and return as an array of link objects\r\n    getBreadcrumbs: function(){\r\n        return this.linksToObjects(\"#breadcrumbsMenu >a:not([id])\");\r\n    },\r\n\r\n//- Get special menu items (imageMenu/aboMenu) as an array of link objects\r\n    getSpecialMenu: function(menuID){\r\n        return this.linksToObjects(menuID+\" a\");\r\n    },\r\n\r\n//- Pimp server generated Twoday classes to enforce Foundation style\r\n    pimpClasses: function(){\r\n        $(\".message .button\").addClass(\"secondary tiny radius\");\r\n    },\r\n\r\n//- Rotation13 method used to obfuscate email-address\r\n    rot13: function(s){\r\n        return s.replace(/[a-zA-Z]/g, function(c){\r\n            return String.fromCharCode((c <= \"Z\" ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26);\r\n        });\r\n    },\r\n\r\n//- Gets minutes from a given date\r\n    getMinute: function(date){\r\n        return date.getHours()*60+date.getMinutes();\r\n    },\r\n\r\n//- Adds/Subtracts minutes from a given date (add: minutes>0, subtract: minutes<0)\r\n    addMinutes: function(date, minutes){\r\n        var newTime = this.getMinute(date) + minutes;\r\n        return new Date(1970,0,1,(newTime/60>>0),(newTime % 60),0);\r\n    },\r\n\r\n//- Formats time string to \"hh:mm\"\r\n    formatTime: function(date){\r\n        return (\"0\"+date.getHours()).slice(-2)+\":\"+(\"0\"+date.getMinutes()).slice(-2);\r\n    },\r\n\r\n//- Converts string-version (\"1.2.3\") to a comparable int (123)\r\n    parseVersion: function(version){\r\n        return parseInt(version.replace(/\\./g,\"\"), 10);\r\n    },\r\n\r\n//- Parse CRC32 value from the skin's top line\r\n    parseCRC: function(chars){\r\n        var crc32 = chars.match(/CRC32:.(.*)[ ]/);\r\n        return (crc32 !== null ? parseInt(crc32[1], 10) : -1);\r\n    },\r\n\r\n//- Extract header data and skin information from releaseinfo.xml\r\n    getRelease: function($data){\r\n        var release = {\r\n            version: $data.find(\"version\").text(),\r\n            author: $data.find(\"author\").text(),\r\n            releasedate: new Date(Date.parse($data.find(\"releasedate\").text())),\r\n            skins: []\r\n        };\r\n        $data.find(\"skin\").each( function(){\r\n            var self = $(this),\r\n                skinName = self.attr(\"key\"),\r\n                dateSourceWasUpdated = new Date(Date.parse(self.attr(\"lastupdate\"))),\r\n                skinCRC = self.attr(\"crc\"),\r\n                skinContent = self.find(\"content\");\r\n            release.skins.push({\r\n                name: skinName,\r\n                update: dateSourceWasUpdated,\r\n                crc32: skinCRC,\r\n                content: skinContent,\r\n                status: null\r\n            });\r\n        });\r\n        return release;\r\n    }\r\n\r\n};"],"sourceRoot":"/source/"}